--- cube-old/cube-old.ino	2018-09-28 12:34:47.283978302 +0200
+++ cube-new/cube-new.ino	2018-09-28 12:37:15.331244689 +0200
@@ -14,9 +14,42 @@ int Raspi = 13;
 int RaspiSignal = 12;
 int successState = 0;
 boolean up = true;
-int good[4] = {118, 221, 89, 31};
+uint8_t good[4] = {118, 221, 89, 31};
 bool statut = 1;
 
+void read_good_tag_id_from_serial(uint8_t *uid, size_t uidsz)
+{
+  char sbuf[3];
+  char tag_id[uidsz * 2 + 1];
+
+  // We need at least uidsz * 2 because we are reading hexadecimal characters
+  if (Serial.available() < uidsz * 2)
+    return;
+
+  // Read tag ID as hexadecimal from serial (uidsz * 2 characters)
+  for (int i = 0; i < uidsz * 2; i++)
+    tag_id[i] = (char)Serial.read();
+
+  // For each pair of hexadecimal character (== one byte)
+  for (int i = 0, j = 0; i < uidsz * 2; i+=2, j++) {
+
+    // Copy the pair of hexadecimal characters to sbuf and make a string out of it
+    sbuf[0] = tag_id[i + 0];
+    sbuf[1] = tag_id[i + 1];
+    sbuf[2] = 0;
+
+    // Convert the resulting hexadecimal string into a byte
+    uid[j] = (uint8_t)strtoul(sbuf, NULL, 16);
+  }
+
+  // Just for debug
+  // Write null byte at the end of tag_id so we can use it as a string
+  //tag_id[uidsz * 2] = 0;
+  //Serial.print("New cube ID: ");
+  //Serial.print(tag_id);
+  //Serial.println();
+}
+
 void setup() {
   pinMode(in1pin, OUTPUT);
   pinMode(in2pin, OUTPUT); // outputs
@@ -61,6 +94,10 @@ void loop() {
   int DownstopButtonState = digitalRead(DownstopButton);
   int RaspiSignalState = digitalRead(RaspiSignal);
 
+  int cube_present = LOW;
+
+  read_good_tag_id_from_serial(good, sizeof(good));
+
   Serial.println(RaspiSignalState);
   if (success = nfc.readPassiveTargetID(PN532_MIFARE_ISO14443A, &uid[0], &uidLength)) {
     if (uid[0] == good[0]   // Si l'UID 0  est égale à 1
@@ -68,37 +105,55 @@ void loop() {
         && uid[2] == good[2]   // Et si l'UID 2  est égale à 43
         && uid[3] == good[3])  // Et si l'UID 4  est égale à 224
     {
-      //digitalWrite(Raspi, HIGH);
-      Serial.println(RaspiSignalState);
-      Serial.println("good");
-      //Serial.println(DownstopButtonState);
-      //Serial.println(UpstopButtonState);
-      //Serial.println(RaspiSignalState);
-
-      if (!DownstopButtonState && RaspiSignalState == HIGH) {
-        digitalWrite(in1pin, HIGH); // make motor go one way
-        delay(1);
-        digitalWrite(in2pin, LOW);
-      }
-      if (!UpstopButtonState && RaspiSignalState == LOW) { // if left button is pressed ...
-        digitalWrite(Raspi, HIGH);
-        digitalWrite(in1pin, LOW); //  make motor go the other way
-        delay(1);
-        digitalWrite(in2pin, HIGH);
-      }
-      if (!UpstopButtonState && RaspiSignalState == HIGH) {
-        digitalWrite(in1pin, LOW); // make motor stop at top
-        delay(1);
-        digitalWrite(in2pin, LOW);
-        delay(5000);
-      }
-      if (!DownstopButtonState && RaspiSignalState == LOW) {
-        digitalWrite(in1pin, LOW); //  make motor go the other way
-        delay(1);
-        digitalWrite(in2pin, LOW);
-      }
-    } else {
-      Serial.println("bad");
+      cube_present = HIGH;
+    }
+  }
+
+  //digitalWrite(Raspi, HIGH);
+  Serial.println(RaspiSignalState);
+  //Serial.println(DownstopButtonState);
+  //Serial.println(UpstopButtonState);
+  //Serial.println(RaspiSignalState);
+
+  if (cube_present == LOW)
+    Serial.println("bad");
+  else
+    Serial.println("good");
+
+  digitalWrite(Raspi, cube_present);
+
+  if (RaspiSignalState == HIGH) {
+
+    if (!DownstopButtonState) {
+  
+      digitalWrite(in1pin, HIGH); // make motor go one way
+      delay(1);
+      digitalWrite(in2pin, LOW);
+    }
+
+    if (!UpstopButtonState) {
+
+      digitalWrite(in1pin, LOW); // make motor stop at top
+      delay(1);
+      digitalWrite(in2pin, LOW);
+      delay(5000);
+    }
+  }
+
+  else if (RaspiSignalState == LOW) {
+
+    if (!DownstopButtonState) {
+
+      digitalWrite(in1pin, LOW); //  make motor go the other way
+      delay(1);
+      digitalWrite(in2pin, LOW);
+    }
+
+    if (!UpstopButtonState) {
+
+      digitalWrite(in1pin, LOW); //  make motor go the other way
+      delay(1);
+      digitalWrite(in2pin, HIGH);
     }
   }
   delay(50);
